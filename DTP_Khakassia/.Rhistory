shiny::runApp()
runApp()
runApp()
runApp()
library(dplyr)
library(sf)
library(leaflet)
library(leaflet.extras)
library(ggplot2)
library(lubridate)
library(plotly)
#Экспортируем данные
dtp_data = st_read("./data/dtp_khakassia.gpkg")
dtp_data = dtp_data[!st_is_empty(dtp_data),]
dtp_data = dtp_data %>% mutate(month = month(datetime, label = TRUE))
khakassia_districts = st_read("./data/khakassia_muni_borders.gpkg")
# Фильтруем данные о ДТП по району
dtp_data_center <- dtp_data %>% filter(region == "Усть-Абаканский район")
# Фильтруем границы района
districts_center <- khakassia_districts %>% filter(name == "Усть-Абаканский муниципальный район")
# Преобразуем систему координат границ района
districts_center <- st_transform(districts_center, crs = 4326)
# Преобразуем данные о ДТП в систему координат WGS 84
dtp_data_center <- st_transform(dtp_data_center, crs = 4326)
# Определяем экстент (границы района)
bounds <- st_bbox(districts_center) %>% as.character()
# Создаём карту
leaflet() %>%
addTiles() %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addPolygons(
data = districts_center,
fillOpacity = 0.3,
color = "blue",
weight = 2,
label = ~paste("Район:", name),
group = "Район"
) %>%
addCircleMarkers(
data = dtp_data_center,
radius = 5,
color = "red",
label = ~paste("Категория:", category, "<br>Дата:", datetime),
group = "ДТП"
) %>%
fitBounds(bounds[1], bounds[2], bounds[3], bounds[4]) %>%
addLayersControl(
overlayGroups = c("Район", "ДТП"),
options = layersControlOptions(collapsed = FALSE)
)
#Количество участников
sum(dtp_data_center$participants_count)
#Количество погибших
sum(dtp_data_center$dead_count)
#Количество поcстрадавших
sum(dtp_data_center$injured_co)
ggplot(dtp_data_center, aes(x=month, fill=category))+
geom_bar()
dtp_data_center
#Экспортируем данные
dtp_data = st_read("./data/dtp_khakassia.gpkg")
dtp_data = dtp_data[!st_is_empty(dtp_data),]
dtp_data = dtp_data %>% mutate(month = month(datetime, label = TRUE))
khakassia_districts = st_read("./data/khakassia_muni_borders.gpkg")
str(khakassia_districts)
# Фильтруем данные о ДТП по району
dtp_data_center <- dtp_data %>% filter(region == "Усть-Абаканский район")
# Фильтруем границы района
districts_center <- khakassia_districts %>% filter(name == "Усть-Абаканский муниципальный район")
# Преобразуем систему координат границ района
districts_center <- st_transform(districts_center, crs = 4326)
# Преобразуем данные о ДТП в систему координат WGS 84
dtp_data_center <- st_transform(dtp_data_center, crs = 4326)
dtp_data_center
# Определяем экстент (границы района)
bounds <- st_bbox(districts_center) %>% as.character()
# Создаём карту
leaflet() %>%
addTiles() %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addPolygons(
data = districts_center,
fillOpacity = 0.3,
color = "blue",
weight = 2,
label = ~paste("Район:", name),
group = "Район"
) %>%
addCircleMarkers(
data = dtp_data_center,
radius = 5,
color = "red",
label = ~paste("Категория:", category, "<br>Дата:", datetime),
group = "ДТП"
) %>%
fitBounds(bounds[1], bounds[2], bounds[3], bounds[4]) %>%
addLayersControl(
overlayGroups = c("Район", "ДТП"),
options = layersControlOptions(collapsed = FALSE)
)
#Количество участников
sum(dtp_data_center$participants_count)
#Количество погибших
sum(dtp_data_center$dead_count)
#Количество поcстрадавших
sum(dtp_data_center$injured_co)
ggplot(dtp_data_center, aes(x=month, fill=category))+
geom_bar()
ggplot(dtp_data_center, aes(x = month, fill = category)) +
geom_bar(position = "fill") +  # Отображение долей
labs(y = "Процент", x = "Месяц", fill = "Категория ДТП") +
scale_y_continuous(labels = scales::percent) +
theme_minimal()
ggplot(dtp_data_center, aes(x=month, fill=category))+
geom_bar()
ggplot(dtp_data_center, aes(x = month, fill = category)) +
geom_bar() +  # Отображение долей
labs(y = "Процент", x = "Месяц", fill = "Категория ДТП") +
scale_y_continuous(labels = scales::percent) +
theme_minimal()
ggplot(dtp_data_center, aes(x=month, fill=category))+
geom_bar()
leaflet() %>%
addTiles() %>%
addHeatmap(
data = dtp_data_center,
lng = ~st_coordinates(geom)[,1],
lat = ~st_coordinates(geom)[,2],
intensity = ~participants_count,
blur = 20,
max = 0.05,
radius = 15
)
dtp_data_center %>%
group_by(month) %>%
summarise(count = n()) %>%
ggplot(aes(x = month, y = count, group = 1)) +
geom_line() +
geom_point() +
labs(title = "Тенденции ДТП по месяцам", x = "Месяц", y = "Количество ДТП")
dtp_data_center %>%
group_by(category) %>%
summarise(total_injured = sum(injured_count)) %>%
ggplot(aes(x = reorder(category, -total_injured), y = total_injured, fill = category)) +
geom_col() +
coord_flip() +
labs(title = "Количество пострадавших по категориям", x = "Категория", y = "Количество пострадавших")
ggplot(dtp_data_center, aes(x = weather, fill = category)) +
geom_bar() +
coord_flip() +
labs(title = "Влияние погодных условий на ДТП", x = "Погодные условия", y = "Количество")
dtp_data_center %>%
unnest(participants) %>%
group_by(role, health_status) %>%
summarise(count = n()) %>%
ggplot(aes(x = role, y = count, fill = health_status)) +
geom_col() +
coord_flip() +
labs(title = "Распределение участников ДТП", x = "Роль", y = "Количество")
grid <- st_make_grid(districts_center, cellsize = 0.01)
dtp_density <- st_intersection(st_sf(grid), dtp_data_center)
ggplot(dtp_density) +
geom_sf() +
labs(title = "Пространственная плотность ДТП")
ggplot(dtp_data_center, aes(x = light, fill = severity)) +
geom_bar() +
labs(title = "Тяжесть ДТП в зависимости от освещения", x = "Освещение", y = "Количество")
dtp_data_center %>%
mutate(hour = hour(datetime)) %>%
ggplot(aes(x = hour, fill = category)) +
geom_histogram(binwidth = 1, position = "stack") +
labs(title = "Распределение ДТП по времени суток", x = "Часы", y = "Количество")
shiny::runApp()
st_is_valid(dtp_data)
st_is_valid(khakassia_districts)
print(st_geometry(filtered_data()))
print(st_geometry(filtered_districts()))
runApp()
st_is_valid(dtp_data)
st_is_valid(khakassia_districts)
print(st_geometry(filtered_data()))
print(st_geometry(filtered_districts()))
leaflet() %>%
addTiles() %>%
addCircleMarkers(lng = c(91.4, 90.9), lat = c(53.7, 53.9), label = c("Точка 1", "Точка 2"))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
str(dtp_data)
# Читаем данные о ДТП
dtp_data <- st_read("./data/dtp_khakassia.gpkg")
dtp_data <- dtp_data[!st_is_empty(dtp_data), ]
dtp_data <- dtp_data %>% mutate(month = month(datetime, label = TRUE))
str(dtp_data)
# Читаем данные о границах районов Хакасии
khakassia_districts <- st_read("./data/khakassia_muni_border.gpkg")
# Читаем данные о ДТП
dtp_data <- st_read("./data/dtp_khakassia.gpkg")
dtp_data <- dtp_data[!st_is_empty(dtp_data), ]
dtp_data <- dtp_data %>% mutate(month = month(datetime, label = TRUE))
str(dtp_data)
# Читаем данные о границах районов Хакасии
khakassia_districts <- st_read("./data/khakassia_muni_borders.gpkg") %>%
st_transform(crs = 4326)  # Преобразуем в WGS 84
# Читаем данные о границах районов Хакасии
khakassia_districts <- st_read("./data/khakassia_muni_border.gpkg") %>%
st_transform(crs = 4326)  # Преобразуем в WGS 84
# Читаем данные о ДТП
dtp_data <- st_read("./data/dtp_khakassia.gpkg")
# Читаем данные о границах районов Хакасии
khakassia_districts <- st_read("./data/khakassia_muni_border.gpkg")
khakassia_districts <- st_transform(khakassia_districts, crs = 4326)
print(st_crs(khakassia_districts))
print(st_crs(dtp_data))
runApp()
runApp()
runApp()
str(dtp_data)
runApp()
runApp()
# Читаем данные о ДТП
dtp_data <- st_read("./data/dtp_khakassia.gpkg")
dtp_data <- dtp_data[!st_is_empty(dtp_data), ]
dtp_data <- dtp_data %>% mutate(month = month(datetime, label = TRUE))
str(dtp_data)
# Читаем данные о границах районов Хакасии
khakassia_districts <- st_read("./data/khakassia_muni_border.gpkg")
khakassia_districts <- st_transform(khakassia_districts, crs = 4326)
str(khakassia_districts)
runApp()
runApp()
dtp_filtered <- dtp_data %>% filter(grepl("город Черногорск", region))
st_coordinates(dtp_filtered)
dtp_filtered <- dtp_data %>% filter(grepl("город Черногорск", region))
print(st_geometry(dtp_filtered))
dtp_filtered <- dtp_data %>% filter(grepl("город Черногорск", region))
all(!is.na(st_coordinates(dtp_filtered)))
unique(dtp_data$region)
unique(dtp_data$region)
unique(khakassia_districts$name)
runApp()
runApp()
runApp()
req(nrow(dtp()) > 0, "Нет данных для отображения.")
req(nrow(district()) > 0, "Нет данных о границах.")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
# карта интенсивности ДТП в Хакасии
leaflet() %>%
addTiles() %>%
addHeatmap(
data = dtp_data_center,
lng = ~st_coordinates(geom)[,1],
lat = ~st_coordinates(geom)[,2],
intensity = ~participants_count,
blur = 20,
max = 0.05,
radius = 15
)
#Экспортируем данные
dtp_data = st_read("./data/dtp_khakassia.gpkg")
dtp_data = dtp_data[!st_is_empty(dtp_data),]
dtp_data = dtp_data %>% mutate(month = month(datetime, label = TRUE))
khakassia_districts = st_read("./data/khakassia_muni_borders.gpkg")
# Фильтруем данные о ДТП по району
dtp_data_center <- dtp_data %>% filter(region == "Усть-Абаканский район")
#Экспортируем данные
dtp_data = st_read("./data/dtp_khakassia.gpkg")
dtp_data = dtp_data[!st_is_empty(dtp_data),]
dtp_data = dtp_data %>% mutate(month = month(datetime, label = TRUE))
khakassia_districts = st_read("./data/khakassia_muni_border.gpkg")
# Фильтруем данные о ДТП по району
dtp_data_center <- dtp_data %>% filter(region == "Усть-Абаканский район")
# Фильтруем границы района
districts_center <- khakassia_districts %>% filter(name == "Усть-Абаканский муниципальный район")
# Преобразуем систему координат границ района
districts_center <- st_transform(districts_center, crs = 4326)
# Преобразуем данные о ДТП в систему координат WGS 84
dtp_data_center <- st_transform(dtp_data_center, crs = 4326)
dtp_data_center
# Определяем экстент (границы района)
bounds <- st_bbox(districts_center) %>% as.character()
# Создаём карту
leaflet() %>%
addTiles() %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addPolygons(
data = districts_center,
fillOpacity = 0.3,
color = "blue",
weight = 2,
label = ~paste("Район:", name),
group = "Район"
) %>%
addCircleMarkers(
data = dtp_data_center,
radius = 5,
color = "red",
label = ~paste("Категория:", category, "<br>Дата:", datetime),
group = "ДТП"
) %>%
fitBounds(bounds[1], bounds[2], bounds[3], bounds[4]) %>%
addLayersControl(
overlayGroups = c("Район", "ДТП"),
options = layersControlOptions(collapsed = FALSE)
)
# карта интенсивности ДТП в Хакасии
leaflet() %>%
addTiles() %>%
addHeatmap(
data = dtp_data_center,
lng = ~st_coordinates(geom)[,1],
lat = ~st_coordinates(geom)[,2],
intensity = ~participants_count,
blur = 20,
max = 0.05,
radius = 15
)
#Количество участников
sum(dtp_data_center$participants_count)
#Количество погибших
sum(dtp_data_center$dead_count)
#Количество поcстрадавших
sum(dtp_data_center$injured_co)
ggplot(dtp_data_center, aes(x=month, fill=category))+
geom_bar()
dtp_data_center %>%
group_by(month) %>%
summarise(count = n()) %>%
ggplot(aes(x = month, y = count, group = 1)) +
geom_line() +
geom_point() +
labs(title = "Тенденции ДТП по месяцам", x = "Месяц", y = "Количество ДТП")
dtp_data_center %>%
group_by(category) %>%
summarise(total_injured = sum(injured_count)) %>%
ggplot(aes(x = reorder(category, -total_injured), y = total_injured, fill = category)) +
geom_col() +
coord_flip() +
labs(title = "Количество пострадавших по категориям", x = "Категория", y = "Количество пострадавших")
ggplot(dtp_data_center, aes(x = light, fill = severity)) +
geom_bar() +
labs(title = "Тяжесть ДТП в зависимости от освещения", x = "Освещение", y = "Количество")
dtp_data_center %>%
mutate(hour = hour(datetime)) %>%
ggplot(aes(x = hour, fill = category)) +
geom_histogram(binwidth = 1, position = "stack") +
labs(title = "Распределение ДТП по времени суток", x = "Часы", y = "Количество")
runApp()
runApp()
